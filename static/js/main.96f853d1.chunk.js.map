{"version":3,"sources":["Components/Header/Header.jsx","Components/Navigation/Navigation.jsx","Components/Offer/Offer.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","title","href","button","Navigation","useEffect","navbar","document","querySelector","console","log","addEventListener","scrollingElement","scrollTop","classList","add","remove","removeEventListener","sections","NavLinks","map","section","index","key","LogoTitle","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","Offer","icon","desc","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yQAkBeA,G,sBAhBA,SAAAC,GACX,OACI,4BAAQC,UAAU,+DACd,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,iCACX,wBAAIA,UAAU,iDAAiDD,EAAME,OACrE,wBAAID,UAAU,gDAAd,6CACA,uBAAGE,KAAK,IAAIF,UAAU,4CAA4CD,EAAMI,cCkDjFC,EAzDI,SAACL,GAGlBM,qBAAU,WACR,IAAIC,EAASC,SAASC,cAAc,WAOpC,OANAC,QAAQC,IAAIJ,GACZC,SAASI,iBAAiB,UAAU,WAC/BJ,SAASK,iBAAiBC,UAAY,GACvCP,EAAOQ,UAAUC,IAAI,UAAW,UAC3BT,EAAOQ,UAAUE,OAAO,UAAW,aAErC,WACLT,SAASU,oBAAoB,aAE9B,IACH,IAAMC,EAAW,CAAC,OAAQ,QAAS,WAAY,YAAa,WAEtDC,EAAW,WACf,OAAOD,EAASE,KAAI,SAACC,EAASC,GAC5B,OACE,wBAAIC,IAAKD,EAAOtB,UAAU,YACxB,uBAAGA,UAAU,WAAWE,KAAI,WAAMmB,IAC/BA,QAMX,OACE,oCACE,yBAAKrB,UAAU,iDACb,yBAAKA,UAAU,aACb,uBAAGA,UAAU,eAAeE,KAAK,KAC9BH,EAAMyB,WAET,4BACExB,UAAU,iBACVyB,KAAK,SACLC,cAAY,WACZC,cAAY,0BACZC,gBAAc,yBACdC,gBAAc,QACdC,aAAW,qBAEX,0BAAM9B,UAAU,yBAElB,yBACEA,UAAU,uCACV+B,GAAG,0BAEH,wBAAI/B,UAAU,mCAAmC,kBAACmB,EAAD,YCrB9Ca,G,MA9BD,SAAAjC,GAOV,OACI,oCACI,yBAAKC,UAAU,wCACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,6BAAd,YACA,wBAAIA,UAAU,yCAAd,iBACA,yBAAKA,UAAU,OAZd,CACb,CAACiC,KAAK,gBAAiBhC,MAAM,aAAciC,KAAK,2CAChD,CAACD,KAAK,eAAgBhC,MAAM,aAAciC,KAAK,2CAC/C,CAACD,KAAK,aAAchC,MAAM,YAAaiC,KAAK,2CAC5C,CAACD,KAAK,cAAehC,MAAM,WAAYiC,KAAK,4CAUdd,KAAI,SAACC,EAASC,GACpB,OACI,yBAAKC,IAAKD,EAAOtB,UAAU,yCACvB,kCAAO,uBAAGA,UAAS,yBAAoBqB,EAAQY,QAA/C,KACA,wBAAIjC,UAAU,oBAAoBqB,EAAQpB,OAC1C,uBAAGD,UAAU,yBAAb,IAAuCqB,EAAQa,KAA/C,eCNzBC,MAVf,WACE,OACE,oCACE,kBAAC,EAAD,CAAYX,UAAU,kBACtB,kBAAC,EAAD,CAAQvB,MAAM,oBAAoBE,OAAO,kBACzC,kBAAC,EAAD,QCCciC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFpC,SAASqC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3C,QAAQ2C,MAAMA,EAAMC,c","file":"static/js/main.96f853d1.chunk.js","sourcesContent":["import React from 'react'\r\nimport './style.css'\r\nconst Header = props => {\r\n    return (\r\n        <header className='d-flex justify-content-center align-items-center text-white'>\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className='col-md-10 mx-auto text-center'>\r\n                        <h1 className='text-capitalize header-title font-weight-bold'>{props.title}</h1>\r\n                        <h4 className='text-capitalize font-italic mb-3 header-desc'>a free bootstrap theme by start bootstrap</h4>\r\n                        <a href=\"#\" className='mt-1 text-capitalize btn btn-info btn-lg'>{props.button}</a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React, {useEffect} from \"react\";\r\nimport \"./style.css\";\r\nimport Header from \"../Header/Header\";\r\nconst Navigation = (props) => {\r\n\r\n\r\n  useEffect(() => {\r\n    let navbar = document.querySelector('.navbar');\r\n    console.log(navbar)\r\n    document.addEventListener('scroll', () => {\r\n      if(document.scrollingElement.scrollTop > 40) {\r\n        navbar.classList.add('bg-info', 'shadow')\r\n      } else navbar.classList.remove('bg-info', 'shadow')\r\n    })\r\n    return () => {\r\n      document.removeEventListener('scroll')\r\n    }\r\n  }, [])\r\n  const sections = [\"home\", \"about\", \"services\", \"portfolio\", \"contact\"];\r\n\r\n  const NavLinks = () => {\r\n    return sections.map((section, index) => {\r\n      return (\r\n        <li key={index} className=\"nav-item\">\r\n          <a className=\"nav-link\" href={`#${section}`}>\r\n            {section}\r\n          </a>\r\n        </li>\r\n      );\r\n    });\r\n  };\r\n  return (\r\n    <>\r\n      <nav className=\"navbar navbar-expand-lg navbar-dark fixed-top\">\r\n        <div className=\"container\">\r\n          <a className=\"navbar-brand\" href=\"#\">\r\n            {props.LogoTitle}\r\n          </a>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-toggle=\"collapse\"\r\n            data-target=\"#navbarSupportedContent\"\r\n            aria-controls=\"navbarSupportedContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\" />\r\n          </button>\r\n          <div\r\n            className=\"collapse navbar-collapse text-center\"\r\n            id=\"navbarSupportedContent\"\r\n          >\r\n            <ul className=\"navbar-nav ml-auto mb-2 mb-lg-0\">{<NavLinks />}</ul>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </>\r\n  );\r\n};\r\nexport default Navigation;\r\n","import React from 'react'\r\nimport './style.css'\r\nconst Offer = props =>  {\r\n    const sections = [\r\n        {icon:'fa fa-desktop', title:\"Responsive\", desc:'Lorem ipsum dolor sit amet consectetur.'},\r\n        {icon:'fa fa-mobile', title:\"Redesigned\", desc:'Lorem ipsum dolor sit amet consectetur.'},\r\n        {icon:'fa fa-lock', title:\"Favorited\", desc:'Lorem ipsum dolor sit amet consectetur.'},\r\n        {icon:'fa fa-magic', title:\"Question\", desc:'Lorem ipsum dolor sit amet consectetur.'},\r\n    ]\r\n    return (\r\n        <>\r\n            <div className=\"offer bg-info text-white text-center\">\r\n                <div className=\"container\">\r\n                    <h6 className='text-white text-uppercase'>Services</h6>\r\n                    <h2 className='text-capitalize font-weight-bold mb-5'>what we offer</h2>\r\n                    <div className=\"row\">\r\n                        \r\n                            {sections.map((section, index) => {\r\n                                return(\r\n                                    <div key={index} className=\"col-lg-3 col-md-6 col-12 mb-lg-0 mb-3\">\r\n                                        <span> <i className={`icon text-info ${section.icon}`}></i> </span>\r\n                                        <h4 className='mt-2 offer-title'>{section.title}</h4>\r\n                                        <p className='offer-desc tetx-muted'> {section.desc} </p>\r\n                                    </div>\r\n                                )\r\n                            })}                        \r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport default Offer;","import React from 'react';\nimport './App.css';\nimport Navigation from './Components/Navigation/Navigation';\nimport Header from './Components/Header/Header';\nimport Offer from './Components/Offer/Offer';\n\nfunction App() {\n  return (\n    < >\n      <Navigation LogoTitle='React Project'/>\n      <Header title='stylish portfolio' button='find out more'/>\n      <Offer/>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}